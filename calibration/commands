First run all.launch ro launch both the cameras.
Then run record_bag to record the checkerboard pattern. One folder with rgb images is created and an events.bag file with events is created. Record very slow.
Then go to e2calib and run convert.py. This converts the events.bag to .h5 file
Then run offline_reconstruction.py in e2calib. This will reconstruction grey scale images from event data
rosrun kalibr kalibr_bagcreater --folder . --output-bag calib.bag

rosrun kalibr kalibr_calibrate_cameras --bag calib.bag --target ../checkerboard.yaml --models 'pinhole-radtan' 'pinhole-radtan' --topics /cam0/image_raw /cam1/image_raw --show-extraction --verbose

Calibration of only one event camera
rosrun kalibr kalibr_calibrate_cameras --target checkerboard.yaml --bag calib.bag --models pinhole-radtan --topics /cam0/image_raw --show-extraction

Calibration of IMU+ Event camera
Obtain the IMu intrinsics from matlab and then open driver.cpp in dvxplorer_ros_driver. Rectify the IMU values based on IMU calibration parameters obtained in the previous step.
rosrun kalibr kalibr_calibrate_imu_camera --target /home/eventcamera/event_camera/uslam_ws/src/rpg_ultimate_slam_open/calibration/kalibr_targets/checkerboard.yaml --bag images_imu.bag --cam /home/eventcamera/event_camera/calibration_data/640x480/one_event_camera/calib-camchain.yaml --imu /home/eventcamera/event_camera/uslam_ws/src/rpg_ultimate_slam_open/calibration/imu/dvxplorer_BMI160.yaml --verbose

# IMU Camera calibration
# OLD rostopic echo -b file.bag -p /topic > data.txt
# steps
record bag with event and imu and reconstruct images
rosbag record /dvs/events /dvs/imu
rosrun image_view video_recorder image:=/rgb_cam/image_raw  _filename:="test.avi"
rosbag filter events_imu.bag imu.bag "topic == '/dvs/imu'"
rostopic echo -b 2023-01-19-16-35-14.bag -p /dvs/imu > imu_calib_data.csv
rosbag-merge --input_paths imu.bag images.bag --output_path . --outbag_name images_imu.bag --write_bag



roslaunch ze_vio_ceres live_DAVIS240C_events_only.launch camera_name:=DVXplorer timeshift_cam_imu:=-0.00015514753826769825 #0.010361079926317417 #-0.001984034119291302

catkin config \
     --init --mkdirs --extend /opt/ros/noetic \
     --merge-devel --cmake-args \
     -DCMAKE_BUILD_TYPE=Release

     msg.linear_acceleration.x = acc_ms[0][0]*Bias_correction[0][0] + acc_ms[0][1]*Bias_correction[1][0] + acc_ms[0][2]*Bias_correction[2][0];
						msg.linear_acceleration.y = acc_ms[1][0]*Bias_correction[0][0] + acc_ms[1][1]*Bias_correction[1][0] + acc_ms[1][2]*Bias_correction[2][0];
						msg.linear_acceleration.z = acc_ms[2][0]*Bias_correction[0][0] + acc_ms[2][1]*Bias_correction[1][0] + acc_ms[2][2]*Bias_correction[2][0];



catkin create pkg ids_cam_driver --catkin-deps sensor_msgs cv_bridge --author "Shrutarv Awasthi" shrutarv.awasthi@tu-dortmund.de --maintainer "Shrutarv Awasthi" shrutarv.awasthi@tu-dortmund.de


Bias of gyroscope are changedd in frontend_base.cpp.
Acceleremeter values are corrected in driver.cpp

Execute C++ scipts
g++ test_camera.cpp -o test_camera $(pkg-config --cflags --libs /usr/lib/x86_64-linux-gnu/pkgconfig/opencv4.pc)
./test_camera
